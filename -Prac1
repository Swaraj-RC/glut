table, tableq = {}, {}
totl, totq = 0, 0

def create(b):
    for i in range(b):
        table[i] = -1
        tableq[i] = -1

def linsert(key, b):
    global totl
    hash = key % b
    flag = 0
    if table[hash] == -1:
        table[hash] = key
    else:
        for i in range(0, b):
            hash = (key + i) % b
            if table[hash] == -1:
                table[hash] = key
                totl += 1
                flag += 1
                break
        if flag == 0:
            print("Table Full or Key not probed.")

def qinsert(key, b):
    global totq
    hash = key % b
    flag = 0
    if tableq[hash] == -1:
        tableq[hash] = key
    else:
        for i in range(0, int((b - 1) / 2)):
            hash = (key + (i * i)) % b
            if tableq[hash] == -1:
                tableq[hash] = key
                totq += 1
                flag += 1
                break
        if flag == 0:
            print("Table Full or Key not probed.")

def lsearch(key, b):
    comparisons = 0
    hash = key % b
    if table[hash] == -1:
        print(f"Key : {key} is not present. Comparisons: {comparisons}")
    else:
        for i in range(0, b):
            comparisons += 1
            hash = (key + i) % b
            if table[hash] == -1:
                print(f"Key : {key} is not present. Comparisons: {comparisons}")
                break
            elif table[hash] == key:
                print(f"Key : {key} is present at location : {hash}. Comparisons: {comparisons}")
                break
        if comparisons == 0:
            print(f"Key : {key} is not present. Comparisons: {comparisons}")

def qsearch(key, b):
    comparisons = 0
    hash = key % b
    if tableq[hash] == -1:
        print(f"Key : {key} is not present. Comparisons: {comparisons}")
    else:
        for i in range(0, int((b - 1) / 2)):
            comparisons += 1
            hash = (key + (i * i)) % b
            if tableq[hash] == -1:
                print(f"Key : {key} is not present. Comparisons: {comparisons}")
                break
            elif tableq[hash] == key:
                print(f"Key : {key} is present at location : {hash}. Comparisons: {comparisons}")
                break
        if comparisons == 0:
            print(f"Key : {key} is not present. Comparisons: {comparisons}")

def printtable(t1, b):
    print("Probed Table:")
    for i in range(b):
        print(t1[i], end="|")
    print("")

# New functions for display options:
def display_linear_table(b):
    print("Linear Probing Table:")
    for i in range(b):
        print(f"Index {i}: {table[i]}")

def display_quadratic_table(b):
    print("Quadratic Probing Table:")
    for i in range(b):
        print(f"Index {i}: {tableq[i]}")

b = int(input("Enter the table size: "))
create(b)

while True:
    ch = int(input("Enter 1-LP | 2-QP | 3-Display Linear Table | 4-Display Quadratic Table | 0-EXIT: "))
    
    if ch == 1:
        while True:
            ch2 = int(input("Enter 1-Insert | 2-Search | 0-Back: "))
            if ch2 == 1:
                if totl == b:
                    print("The table is already full.")
                else:
                    key = int(input("Enter the client phone number to be inserted: "))
                    linsert(key, b)
            elif ch2 == 2:
                key = int(input("Enter the client phone number to be searched: "))
                lsearch(key, b)
            elif ch2 == 0:
                print("GOING BACK")
                break
            printtable(table, b)

    elif ch == 2:
        while True:
            ch2 = int(input("Enter 1-Insert | 2-Search | 0-Back: "))
            if ch2 == 1:
                if totq == b:
                    print("The table is already full.")
                else:
                    key = int(input("Enter the client phone number to be inserted: "))
                    qinsert(key, b)
            elif ch2 == 2:
                key = int(input("Enter the client phone number to be searched: "))
                qsearch(key, b)
            elif ch2 == 0:
                print("GOING BACK")
                break
            printtable(tableq, b)

    elif ch == 3:
        display_linear_table(b)

    elif ch == 4:
        display_quadratic_table(b)

    elif ch == 0:
        print("EXITED")
        break
